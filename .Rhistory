"Equal variances, normalized"), col = c(gray(0.85), 5:6), lwd = 2)
# Correlations (stronger with different variances and unnormalized;
ind <- lower.tri(matrix(nrow = n.proj, ncol = n.proj))
median(abs(cor(sapply(1:n.proj, function(i) inprod.fdata(X.fdata, samp1[i]))))[ind])
median(abs(cor(sapply(1:n.proj, function(i) inprod.fdata(X.fdata, samp2[i]))))[ind])
median(abs(cor(sapply(1:n.proj, function(i) inprod.fdata(X.fdata, samp3[i]))))[ind])
median(abs(cor(sapply(1:n.proj, function(i) inprod.fdata(X.fdata, samp4[i]))))[ind])
# Comparison for the threshold
samp1 <- rdir.pc(n = 100, X.fdata = X.fdata, ncomp = 0.25, fdata2pc.obj = pc)
samp2 <- rdir.pc(n = 100, X.fdata = X.fdata, ncomp = 0.50, fdata2pc.obj = pc)
samp3 <- rdir.pc(n = 100, X.fdata = X.fdata, ncomp = 0.90, fdata2pc.obj = pc)
samp4 <- rdir.pc(n = 100, X.fdata = X.fdata, ncomp = 0.95, fdata2pc.obj = pc)
samp5 <- rdir.pc(n = 100, X.fdata = X.fdata, ncomp = 0.99, fdata2pc.obj = pc)
cols <- rainbow(5, alpha = 0.25)
par(mfrow = c(3, 2))
plot(X.fdata, col = gray(0.75), lty = 1, main = "Data")
plot(samp1, col = cols[1], lty = 1, main = "Threshold = 0.25")
plot(samp2, col = cols[2], lty = 1, main = "Threshold = 0.50")
plot(samp3, col = cols[3], lty = 1, main = "Threshold = 0.90")
plot(samp4, col = cols[4], lty = 1, main = "Threshold = 0.95")
plot(samp5, col = cols[5], lty = 1, main = "Threshold = 0.99")
# Normalizing
samp1 <- rdir.pc(n = 100, X.fdata = X.fdata, ncomp = 0.50, fdata2pc.obj = pc,
norm = TRUE)
samp2 <- rdir.pc(n = 100, X.fdata = X.fdata, ncomp = 0.90, fdata2pc.obj = pc,
norm = TRUE)
samp3 <- rdir.pc(n = 100, X.fdata = X.fdata, ncomp = 0.95, fdata2pc.obj = pc,
norm = TRUE)
samp4 <- rdir.pc(n = 100, X.fdata = X.fdata, ncomp = 0.99, fdata2pc.obj = pc,
norm = TRUE)
samp5 <- rdir.pc(n = 100, X.fdata = X.fdata, ncomp = 0.999, fdata2pc.obj = pc,
norm = TRUE)
cols <- rainbow(5, alpha = 0.25)
par(mfrow = c(3, 2))
plot(X.fdata, col = gray(0.75), lty = 1, main = "Data")
plot(samp1, col = cols[1], lty = 1, main = "Threshold = 0.50")
plot(samp2, col = cols[2], lty = 1, main = "Threshold = 0.90")
plot(samp3, col = cols[3], lty = 1, main = "Threshold = 0.95")
plot(samp4, col = cols[4], lty = 1, main = "Threshold = 0.99")
plot(samp5, col = cols[5], lty = 1, main = "Threshold = 0.999")
## End(Not run)
set.seed(345678)
t <- seq(0, 1, l = 101)
n <- 100
X <- r.ou(n = n, t = t)
beta0 <- fdata(mdata = cos(2 * pi * t) - (t - 0.5)^2, argvals = t,
rangeval = c(0,1))
Y <- inprod.fdata(X, beta0) + rnorm(n, sd = 0.1)
# Linear model
mod <- fregre.pc(fdataobj = X, y = Y, l = 1:3)
# Projections
proj.X1 <- inprod.fdata(X, r.ou(n = 1, t = t))
proj.X2 <- inprod.fdata(X, r.ou(n = 1, t = t))
proj.X12 <- cbind(proj.X1, proj.X2)
# Statistics
t1 <- rp.flm.statistic(proj.X = proj.X1, residuals = mod$residuals)
t2 <- rp.flm.statistic(proj.X = proj.X2, residuals = mod$residuals)
t12 <- rp.flm.statistic(proj.X = proj.X12, residuals = mod$residuals)
t1$statistic
t2$statistic
t12$statistic
# Recycling proj.X.ord
rp.flm.statistic(proj.X.ord = t1$proj.X.ord, residuals = mod$residuals)$statistic
t1$statistic
# Sort in the columns
cbind(proj.X12[t12$proj.X.ord[, 1], 1], proj.X12[t12$proj.X.ord[, 2], 2]) -
apply(proj.X12, 2, sort)
# FORTRAN and R code
rp.flm.statistic(proj.X = proj.X1, residuals = mod$residuals)$statistic -
rp.flm.statistic(proj.X = proj.X1, residuals = mod$residuals,
F.code = FALSE)$statistic
# Matrix and vector residuals
rp.flm.statistic(proj.X = proj.X12, residuals = mod$residuals)$statistic
rp.flm.statistic(proj.X = proj.X12,
residuals = rbind(mod$residuals, mod$residuals * 2))$statistic
## End(Not run)
## Not run:
# Simulated example
set.seed(345678)
t <- seq(0, 1, l = 101)
n <- 100
X <- r.ou(n = n, t = t, alpha = 2, sigma = 0.5)
beta0 <- fdata(mdata = cos(2 * pi * t) - (t - 0.5)^2, argvals = t,
rangeval = c(0,1))
Y <- inprod.fdata(X, beta0) + rnorm(n, sd = 0.1)
# Test all cases
rp.flm.test(X.fdata = X, Y = Y, est.method = "pc")
rp.flm.test(X.fdata = X, Y = Y, est.method = "pls")
rp.flm.test(X.fdata = X, Y = Y, est.method = "basis",
p.criterion = fda.usc::GCV.S)
rp.flm.test(X.fdata = X, Y = Y, est.method = "pc", p = 5)
rp.flm.test(X.fdata = X, Y = Y, est.method = "pls", p = 5)
rp.flm.test(X.fdata = X, Y = Y, est.method = "basis", p = 5)
rp.flm.test(X.fdata = X, Y = Y, beta0.fdata = beta0)
# Composite hypothesis: do not reject FLM
rp.test <- rp.flm.test(X.fdata = X, Y = Y, est.method = "pc")
rp.test$p.values.fdr
pcvm.test <- flm.test(X.fdata = X, Y = Y, est.method = "pc", B = 1e3,
plot.it = FALSE)
pcvm.test
# Estimation of beta
par(mfrow = c(1, 3))
plot(X, main = "X")
plot(beta0, main = "beta")
lines(rp.test$beta.est, col = 2)
lines(pcvm.test$beta.est, col = 3)
plot(density(Y), main = "Density of Y", xlab = "Y", ylab = "Density")
rug(Y)
# Simple hypothesis: do not reject beta = beta0
rp.flm.test(X.fdata = X, Y = Y, beta0.fdata = beta0)$p.values.fdr
flm.test(X.fdata = X, Y = Y, beta0.fdata = beta0, B = 1e3, plot.it = FALSE)
# Simple hypothesis: reject beta = beta0^2
rp.flm.test(X.fdata = X, Y = Y, beta0.fdata = beta0^2)$p.values.fdr
flm.test(X.fdata = X, Y = Y, beta0.fdata = beta0^2, B = 1e3, plot.it = FALSE)
# Tecator dataset
# Load data
data(tecator)
absorp <- tecator$absorp.fdata
ind <- 1:129 # or ind <- 1:215
x <- absorp[ind, ]
y <- tecator$y$Fat[ind]
# Composite hypothesis
rp.tecat <- rp.flm.test(X.fdata = x, Y = y, est.method = "pc")
pcvm.tecat <- flm.test(X.fdata = x, Y = y, est.method = "pc", B = 1e3,
plot.it = FALSE)
rp.tecat$p.values.fdr[c(5, 10), ]
pcvm.tecat
# Simple hypothesis
zero <- fdata(mdata = rep(0, length(x$argvals)), argvals = x$argvals,
rangeval = x$rangeval)
rp.flm.test(X.fdata = x, Y = y, beta0.fdata = zero)
flm.test(X.fdata = x, Y = y, beta0.fdata = zero, B = 1e3)
# With derivatives
rp.tecat <- rp.flm.test(X.fdata = fdata.deriv(x, 1), Y = y, est.method = "pc")
rp.tecat$p.values.fdr
rp.tecat <- rp.flm.test(X.fdata = fdata.deriv(x, 2), Y = y, est.method = "pc")
rp.tecat$p.values.fdr
# AEMET dataset
# Load data
data(aemet)
wind.speed <- apply(aemet$wind.speed$data, 1, mean)
temp <- aemet$temp
# Remove the 5% of the curves with less depth (i.e. 4 curves)
par(mfrow = c(1, 1))
res.FM <- depth.FM(temp, draw = TRUE)
qu <- quantile(res.FM$dep, prob = 0.05)
l <- which(res.FM$dep <= qu)
lines(aemet$temp[l], col = 3)
# Data without outliers
wind.speed <- wind.speed[-l]
temp <- temp[-l]
# Composite hypothesis
rp.aemet <- rp.flm.test(X.fdata = temp, Y = wind.speed, est.method = "pc")
pcvm.aemet <- flm.test(X.fdata = temp, Y = wind.speed, B = 1e3,
est.method = "pc", plot.it = FALSE)
rp.aemet$p.values.fdr
apply(rp.aemet$p.values.fdr, 2, range)
pcvm.aemet
# Simple hypothesis
zero <- fdata(mdata = rep(0, length(temp$argvals)), argvals = temp$argvals,
rangeval = temp$rangeval)
flm.test(X.fdata = temp, Y = wind.speed, beta0.fdata = zero, B = 1e3,
plot.it = FALSE)
rp.flm.test(X.fdata = temp, Y = wind.speed, beta0.fdata = zero)
## End(Not run)
## Not run:
par(mfrow=c(3,2))
lent<-30
tt<-seq(0,1,len=lent)
mu<-fdata(rep(0,lent),tt)
plot(rproc2fdata(200,t=tt,sigma="OU",par.list=list("scale"=1)))
plot(rproc2fdata(200,mu=mu,sigma="OU",par.list=list("scale"=1)))
plot(rproc2fdata(200,t=tt,sigma="vexponential"))
plot(rproc2fdata(200,t=tt,sigma=1:lent))
plot(rproc2fdata(200,t=tt,sigma="brownian"))
plot(rproc2fdata(200,t=tt,sigma="wiener"))
#plot(rproc2fdata(200,seq(0,1,len=30),sigma="oo")) # this is an error
## End(Not run)
<!-- ```{r example} -->
<!-- ## basic example code -->
<!--
library(roxygen2)
setwd("C:/Users/moviedo/github/fda.usc/")
getwd()
pkgbuild::compile_dll()
roxygenize()
devtools::document()
devtools::check("C:/Users/moviedo/github/fda.usc",args="--as-cran",manual=TRUE)
devtools::check(args="--as-cran",manual=TRUE)
<img src="inst/figures/baseplot.png" height="300"/>
-->
getwd(())
getwd(
)
devtools:::install()
## Not run:
np=101
tt=seq(0,1,len=np)
nbasis=11
base1 <- create.bspline.basis(c(0, np), nbasis)
base2 <- create.fourier.basis(c(0, np), nbasis)
S1<-S.basis(tt,basis=base1,lambda=3)
image(S1)
S2<-S.basis(tt,basis=base2,lambda=3)
image(S2)
## End(Not run)
library(fda.usc)
## Not run:
np=101
tt=seq(0,1,len=np)
nbasis=11
base1 <- create.bspline.basis(c(0, np), nbasis)
base2 <- create.fourier.basis(c(0, np), nbasis)
S1<-S.basis(tt,basis=base1,lambda=3)
image(S1)
S2<-S.basis(tt,basis=base2,lambda=3)
image(S2)
## End(Not run)
tt=1:101
S=S.LLR(tt,h=5)
S2=S.LLR(tt,h=10,Ker=Ker.tri)
S3=S.NW(tt,h=10,Ker=Ker.tri)
S4=S.KNN(tt,h=5,Ker=Ker.tri)
par(mfrow=c(2,2))
image(S)
image(S2)
image(S3)
image(S4)
S5=S.LPR(tt,p=1, Ker=Ker.tri)
S6=S.LCR(tt,p=1, Ker=Ker.tri)
image(S4)
## End(
S5=S.LPR(tt,p=1, Ker=Ker.tri)
traceback()
tt
?h.default
h.default(tt)
S5=S.LPR(tt,h=1, p=1, Ker=Ker.tri)
traceback()
S5=S.LPR(tt,h=10, p=1, Ker=Ker.tri)
traceback()
plot(S5)
image(S5)
S5=S.LPR(tt,h=20, p=1, Ker=Ker.tri)
image(S5)
S5=S.LPR(tt,p=1, Ker=Ker.tri)
S5=S.LPR(tt,h=5,p=1, Ker=Ker.tri)
image(S5)
S5=S.LPR(tt,h=10,p=1, Ker=Ker.tri)
S6=S.LCR(tt,h=10,p=1, Ker=Ker.tri)
tt=1:101
S=S.LLR(tt,h=5)
S2=S.LLR(tt,h=10,Ker=Ker.tri)
S3=S.NW(tt,h=10,Ker=Ker.tri)
S4=S.KNN(tt,h=5,Ker=Ker.tri)
par(mfrow=c(2,3))
image(S)
image(S2)
image(S3)
image(S4)
S5=S.LPR(tt,h=10,p=1, Ker=Ker.tri)
S6=S.LCR(tt,h=10,Ker=Ker.tri)
image(S5)
image(S6)
## Not run:
data(phoneme)
DATA1<-phoneme$learn[c(30:50,210:230)]
DATA2<-phoneme$test[231:250]
a1=semimetric.basis(DATA1,DATA2)
a2=semimetric.basis(DATA1,DATA2,type.basis1="fourier",
nbasis1=11, type.basis2="fourier",nbasis2=11)
fd1 <- fdata2fd(DATA1)
fd2 <- fdata2fd(DATA2)
a3=semimetric.basis(fd1,fd2)
a4=semimetric.basis(fd1,fd2,nderiv=1)
## End(Not run
data(phoneme)
ind=1:100 # 2 groups
mlearn<-phoneme$learn[ind,]
mtest<-phoneme$test[ind,]
n=nrow(mlearn[["data"]])
np=ncol(mlearn[["data"]])
mdist1=semimetric.pca(mlearn,mtest)
mdist2=semimetric.pca(mlearn,mtest,q=2)
mdist3=semimetric.deriv(mlearn,mtest,nderiv=0)
mdist4=semimetric.fourier(mlearn,mtest,nderiv=2,nbasis=21)
#uses hshift function
#mdist5=semimetric.hshift(mlearn,mtest) #takes a lot
glearn<-phoneme$classlearn[ind]
#uses mplsr function
mdist6=semimetric.mplsr(mlearn,mtest,5,glearn)
mdist0=metric.lp(mlearn,mtest)
b=as.dist(mdist6)
c2=hclust(b)
plot(c2)
memb <- cutree(c2, k = 2)
table(memb,phoneme$classlearn[ind])
## End(Not run)
## Not run:
data(phoneme)
mlearn<-phoneme[["learn"]]
glearn<-phoneme[["classlearn"]]
out=classif.knn(glearn,mlearn,knn=c(3,5,7))
summary(out)
out2=classif.kernel(glearn,mlearn,h=2^(0:5))
summary(out2)
## End(Not run)
## Not run:
n= 200
tt= seq(0,1,len=101)
x0<-rproc2fdata(n,tt,sigma="wiener")
x1<-rproc2fdata(n,tt,sigma=0.1)
x<-x0*3+x1
beta = tt*sin(2*pi*tt)^2
fbeta = fdata(beta,tt)
y<-inprod.fdata(x,fbeta)+rnorm(n,sd=0.1)
pc1=fdata2pc(x)
summary(pc1,y)
pls1=fdata2pls(x,y)
summary(pls1,cor=TRUE)
## End(Not run)
## Not run:
# Ex 1. Simulated data
n= 200;tt= seq(0,1,len=101)
x0<-rproc2fdata(n,tt,sigma="wiener")
x1<-rproc2fdata(n,tt,sigma=0.1)
x<-x0*3+x1
beta = tt*sin(2*pi*tt)^2
fbeta = fdata(beta,tt)
y<-inprod.fdata(x,fbeta)+rnorm(n,sd=0.1)
# Functional regression
res=fregre.pc(x,y,l=c(1:5))
summary(res,3,ask=TRUE)
res2=fregre.pls(x,y,l=c(1:4))
summary(res2)
res3=fregre.pls(x,y)
summary(res3)
## Not run:
# Time consuming
data(tecator)
ind<-1:129
ab=tecator$absorp.fdata[ind]
ab2=fdata.deriv(ab,2)
yfat=as.integer(cut(tecator$y[ind,"Fat"],c(0,15,100)))-1
xlist=list("df"=data.frame(yfat),"ab2"=ab2,"ab"=ab)
f<-yfat~ab+ab2
res=fregre.gkam(f,data=xlist,family=binomial("logit"),control=list(maxit=2))
summary(res)
res
## End(Not run)
data(tecator)
names(tecator)
names(tecator$absorp.fdata)
names(tecator$y)
names(tecator$y)
class(tecator$absorp.fdata)
class(tecator$y)
dim(tecator$absorp.fdata)
dim(tecator$y)
a1<-seq(0,1,by=.01)
a2=rnorm(length(a1),sd=0.2)
f1<-(sin(2*pi*a1))+rnorm(length(a1),sd=0.2)
nc<-50
np<-length(f1)
tt=1:101
mdata<-matrix(NA,ncol=np,nrow=nc)
for (i in 1:nc) mdata[i,]<- (sin(2*pi*a1))+rnorm(length(a1),sd=0.2)
mdata<-fdata(mdata,tt)
S=S.NW(tt,h=0.15)
var.e<-Var.e(mdata,S)
var.y<-Var.y(mdata,S)
var.y2<-Var.y(mdata,S,var.e) #the same
<!-- ```{r example} -->
<!-- ## basic example code -->
<!--
library(roxygen2)
setwd("C:/Users/moviedo/github/fda.usc/")
getwd()
pkgbuild::compile_dll()
roxygenize()
devtools::document()
#devtools::check("C:/Users/moviedo/github/fda.usc",args="--as-cran",manual=TRUE)
#devtools::check(args="--as-cran",manual=TRUE)
devtools:::install()
<img src="inst/figures/baseplot.png" height="300"/>
-->
getwd()
devtools::check(args="--as-cran",manual=TRUE)
50/30
30/50
data(tecator)
cutpoint <- 18
tecator$y$class <-factor(ifelse(tecator$y$Fat<cutpoint,0,1))
table(tecator$y$class )
x<-tecator[[1]]
x2<-fdata.deriv(tecator[[1]],2)
data<- list("df"=tecator$y,x=x,x2=x2)
formula<- formula(class~x+x2)
# ex: default excution of classifier (no k-fold CV)
classif="classif.glm";
out.default<-classif.kfold(formula, data, classif = classif)
out.default
out.default$param.min
out.default$params.error
summary(out.default)
formula<- formula(class~x)
# ex: default excution of classifier (no k-fold CV)
classif="classif.glm";
out.default<-classif.kfold(formula, data, classif = classif)
out.default
out.default$param.min
out.default$params.error
summary(out.default)
out.default$param.min
#' # ex: Number of PC basis elements selected by 10-fold CV
#' # Logistic classifier
kfold = 10
param.kfold <- list("x"=list("pc"=c(1:8)),"x2"=list("pc"=c(1:8)))
out.kfold1 <- classif.kfold(formula, data, classif = classif,
kfold = kfold,param.kfold = param.kfold)
out.kfold3$param.min
out.kfold1$param.min
min(out.kfold31params.error)
min(out.kfold1$params.error)
out.kfold1$params.error
min(out.kfold1$params.error)
formula
param.kfold <- list("x"=list("pc"=c(1:8)))
out.kfold1 <- classif.kfold(formula, data, classif = classif,
kfold = kfold,param.kfold = param.kfold)
classif
classif <- "classif.adaboost"
out.kfold1 <- classif.kfold(formula, data, classif = classif,
kfold = kfold,param.kfold = param.kfold)
getwd()
pkgbuild::compile_dll()
roxygenize()
devtools::document()
library("ggplot2")
library("dlstats")
pkg.core <- c( "fda", "fda.usc","ftsa","fdasrvf","refund","fdapace","FDboost","fds")
#x <- cran_stats(pkg.core)
x <- cran_stats(pkg.core[2])
library("ggplot2")
library("dlstats")
pkg.core <- c( "fda", "fda.usc","ftsa","fdasrvf","refund","fdapace","FDboost","fds")
#x <- cran_stats(pkg.core)
x <- cran_stats(pkg.core[2])
#as.numeric(x[,1])
#class(x[,1])
#head(x)
#ii<-which(x$package=="fda.usc")
#x<-x[ii,]
# ii<-(x[,2]!="2019-05-08")
#x$log_downloads<-log(x[,3])
#ggplot(x[ii,], aes(end, log_downloads, group=package, color=package)) +
ggplot(x[1:(nrow(x)-1),], aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))+  xlab("Months")
par(mfrow=c(1,2))
#as.numeric(x[,1])
#class(x[,1])
#head(x)
#ii<-which(x$package=="fda.usc")
#x<-x[ii,]
# ii<-(x[,2]!="2019-05-08")
#x$log_downloads<-log(x[,3])
#ggplot(x[ii,], aes(end, log_downloads, group=package, color=package)) +
ggplot(x[1:(nrow(x)-1),], aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))+  xlab("Months")
par(mfrow=c(1,2))
#as.numeric(x[,1])
#class(x[,1])
#head(x)
#ii<-which(x$package=="fda.usc")
#x<-x[ii,]
# ii<-(x[,2]!="2019-05-08")
#x$log_downloads<-log(x[,3])
#ggplot(x[ii,], aes(end, log_downloads, group=package, color=package)) +
ggplot(x[1:(nrow(x)),], aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))+  xlab("Months")
#as.numeric(x[,1])
#class(x[,1])
#head(x)
#ii<-which(x$package=="fda.usc")
#x<-x[ii,]
# ii<-(x[,2]!="2019-05-08")
#x$log_downloads<-log(x[,3])
#ggplot(x[ii,], aes(end, log_downloads, group=package, color=package)) +
ggplot(x[1:(nrow(x)-1),], aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))+  xlab("Months")
par(mfrow=c(1,2))
#as.numeric(x[,1])
#class(x[,1])
#head(x)
#ii<-which(x$package=="fda.usc")
#x<-x[ii,]
# ii<-(x[,2]!="2019-05-08")
#x$log_downloads<-log(x[,3])
#ggplot(x[ii,], aes(end, log_downloads, group=package, color=package)) +
ggplot(x[1:(nrow(x)-1),], aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))+  xlab("Months")
ggplot(x[1:(nrow(x)-1),], aes(end, downloads, group=package, color=package)) +
geom_line() + geom_point(aes(shape=package))+  xlab("Months")
getwd()
pkgbuild::compile_dll()
getwd()
setwd("C:/Users/moviedo/github/fda.usc/")
getwd()
roxygenize("C:/Users/moviedo/github/fda.usc/")
library(roxygen2)
getwd()
roxygenize("C:/Users/moviedo/github/fda.usc/")
